@startuml
' New session creation
actor client
box "selenium-remote-driver" #LightBlue
	participant DesiredCapabilities as capabilities
	participant RemoteWebDriver
	participant HttpCommandExecutor
	participant ProtocolHandshake
	participant DriverCommandExecutor
end box

box "selenium-chrome-driver" #DeepSkyBlue
	participant ChromeDriver
	participant ChromeDriverService
	participant ChromeDriverCommandExecutor
end box

== Prepare browser capabilities ==
client -> capabilities : chrome()
capabilities -> client : capabilities object
== Prepare driver ==
client -> ChromeDriver : ::new(capabilities)
activate ChromeDriver
ChromeDriver -> ChromeDriverService : createDefaultService()
note right : service will use the chromedriver executable \nidentified by {@link #CHROME_DRIVER_EXE_PROPERTY}
activate ChromeDriverService
ChromeDriverService -> ChromeDriver : chromeDriverService
deactivate ChromeDriverService
ChromeDriver -> ChromeDriverCommandExecutor : ::new(chromeDriverService)
activate ChromeDriverCommandExecutor
ChromeDriverCommandExecutor -> ChromeDriver : commandExecutor
deactivate ChromeDriverCommandExecutor
ChromeDriver -> RemoteWebDriver : ::new(commandExecutor, capabilities)
activate RemoteWebDriver
RemoteWebDriver -> RemoteWebDriver : init(capabilities)
RemoteWebDriver -> RemoteWebDriver : startSession(capabilities)
activate RemoteWebDriver #FFBBBB
RemoteWebDriver -> DriverCommandExecutor : execute(DriverCommand.NEW_SESSION)
activate DriverCommandExecutor #FFBBBB
DriverCommandExecutor -> ChromeDriverService : start()
DriverCommandExecutor -> HttpCommandExecutor : execute(DriverCommand.NEW_SESSION)
activate HttpCommandExecutor #FFBBBB
HttpCommandExecutor -> ProtocolHandshake : createSession(command)
activate ProtocolHandshake #FFBBBB
ProtocolHandshake -> ProtocolHandshake : HTTP POST /session
ProtocolHandshake -> HttpCommandExecutor : result
deactivate ProtocolHandshake
HttpCommandExecutor -> DriverCommandExecutor : Result
deactivate DriverCommandExecutor
deactivate ProtocolHandshake
deactivate HttpCommandExecutor

RemoteWebDriver -> ChromeDriver
deactivate RemoteWebDriver
ChromeDriver -> client : driver
deactivate ChromeDriver
@enduml



@startuml
' opening a url (just a command)
actor client
box "selenium-remote-driver" #LightBlue
	participant RemoteWebDriver
	participant HttpCommandExecutor
	participant DriverCommandExecutor
	participant W3CHttpCommandCodec
	participant W3CHttpResponseCodec
	participant OkHttpClient
end box

client -> RemoteWebDriver : get("URL")
RemoteWebDriver -> RemoteWebDriver : execute(DriverCommand.GET, "URL")
activate RemoteWebDriver
RemoteWebDriver -> DriverCommandExecutor : execute(command)
DriverCommandExecutor -> HttpCommandExecutor : execute(command)
activate HttpCommandExecutor
HttpCommandExecutor -> W3CHttpCommandCodec : encode(command)
W3CHttpCommandCodec -> HttpCommandExecutor : HttpRequest "POST /session/XYZ/url URL"
HttpCommandExecutor -> OkHttpClient : execute(httpRequest)
OkHttpClient -> HttpCommandExecutor : httpResponse
HttpCommandExecutor -> W3CHttpResponseCodec : decode(httpResponse)
W3CHttpResponseCodec -> HttpCommandExecutor : Response response
HttpCommandExecutor -> RemoteWebDriver
deactivate HttpCommandExecutor
deactivate RemoteWebDriver
RemoteWebDriver -> client
@enduml





@startuml
'Capability hierarchy
package selenium-api <<Rectangle>> {
	interface Capabilities
	class AbstractCapabilities
	class ImmutableCapabilities
	class MutableCapabilities
}

package selenium-chrome-driver <<Rectangle>> {
	class ChromeOptions
}

package selenium-remote-driver <<Rectangle>> {
	class DesiredCapabilities
}

interface Serializable

Capabilities <|.down. AbstractCapabilities
Serializable <|.down. MutableCapabilities
Serializable <|.down. ImmutableCapabilities
AbstractCapabilities <|-down- MutableCapabilities
AbstractCapabilities <|-down- ImmutableCapabilities
MutableCapabilities <|-down- DesiredCapabilities
MutableCapabilities <|-down- ChromeOptions
@enduml





@startuml
' Driver classes hierarchy
package selenium-api <<Rectangle>> {
	interface SearchContext
	interface WebDriver
}
package selenium-remote-driver <<Rectangle>> {
	class RemoteWebDriver
}
package selenium-chrome-driver <<Rectangle>> {
	class ChromeDriver
}

SearchContext <.up. WebDriver
WebDriver <-up- RemoteWebDriver
RemoteWebDriver <-up- ChromeDriver
@enduml







@startuml
' overview of component communication for UI testing
node "ChromeDriver" as driver
[Selenium client library] -> driver : HTTP Request
note bottom of driver
implements WebDriver protocol
HttpServer in C++
end note
cloud "Browser" as browser
driver - debug_port : send commands
note bottom of debug_port
DevTools
remote debugging
interface
end note
debug_port -> browser : WebSocket
@enduml




@startuml
' DriverService classes hierarchy
package selenium-remote-driver <<Rectangle>> {
	class DriverService
	note left of DriverService
    Manages the life and death of a native executable driver server.

    It is expected that the driver server implements the
    WebDriver W3C protocol (it was JsonWireProtocol before standartization)

    In particular, it should implement /status command that is used to check if the server is alive.

    In addition to this, it is supposed that the driver server implements /shutdown hook that is
    used to stop the server.
    end note
}
package selenium-chrome-driver <<Rectangle>> {
	class ChromeDriverService
}
package selenium-firefox-driver <<Rectangle>> {
	class GeckoDriverService
}
DriverService <|-down- ChromeDriverService
DriverService <|-down- GeckoDriverService
@enduml






@startuml
' CommandExecutor classes hierarchy
package selenium-remote-driver <<Rectangle>> {
	interface CommandExecutor {
		Response execute(Command command)
	}
	class HttpCommandExecutor
	class DriverCommandExecutor
	note left of DriverCommandExecutor
		A specialized HttpCommandExecutor that will use a DriverService
		that lives and dies with a single WebDriver session.
		The service will be restarted upon each new session
		request and shutdown after each quit command.
	end note
	class DriverService

}
package selenium-chrome-driver <<Rectangle>> {
	class ChromeDriverCommandExecutor
		note left of ChromeDriverCommandExecutor
    		understands ChromeDriver specific commands
    	end note
}
CommandExecutor <|.down. HttpCommandExecutor
HttpCommandExecutor <|-down- DriverCommandExecutor
DriverService -right-* DriverCommandExecutor
DriverCommandExecutor <|-down- ChromeDriverCommandExecutor
@enduml

@startuml
' CommandCodec classes hierarchy
package selenium-remote-driver <<Rectangle>> {
	interface CommandCodec
	note left of CommandCodec
		Converts Command objects to and from another representation.
	end note
	class AbstractHttpCommandCodec
	note left of AbstractHttpCommandCodec
    	Adheres to the W3C's WebDriver wire protocol
    	https://w3.org/tr/webdriver
    end note
    class JsonHttpCommandCodec
    note bottom of JsonHttpCommandCodec
		Adheres to the Selenium project's JSON/HTTP wire protocol
		https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol
		Should be deprecated
	end note
   class W3CHttpCommandCodec
    note bottom of W3CHttpCommandCodec
		Adheres to the W3C's WebDriver wire protocol
		https://w3.org/tr/webdriver
	end note

}
CommandCodec <|.down. AbstractHttpCommandCodec
AbstractHttpCommandCodec <|-down- JsonHttpCommandCodec
AbstractHttpCommandCodec <|-down- W3CHttpCommandCodec
@enduml








@startuml
' Overview of important class relations
package selenium-remote-driver <<Rectangle>> {
	class RemoteWebDriver
	interface CommandExecutor {
		Response execute(Command command)
	}
	interface Capabilities {
		Response execute(Command command)
	}
	class HttpCommandExecutor
    	class DriverCommandExecutor
    	class DriverService
}
CommandExecutor -left-* RemoteWebDriver
Capabilities -down-* RemoteWebDriver
CommandExecutor <|.down. HttpCommandExecutor
HttpCommandExecutor <|-down- DriverCommandExecutor
DriverService -right-* DriverCommandExecutor
@enduml


